/*----------------------------------------------------------------------------
--------------------- 1ra. Area: Codigo de Usuario
----------------------------------------------------------------------------*/

//-------> Importaciones 
//-------> Paquetes 

package Analizadores;
import java.awt.TextArea;
import java.util.*; 
import java_cup.runtime.Symbol;
import Entorno.*;
import Entorno.Simbolo.EnumTipoDato;
import Expresion.*;
import Instruccion.*;

//-------> Codigo para el parser, variables, metodos

parser code
{:  
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/

    public LinkedList<Instruccion> resultado = new LinkedList<>();
    public TextArea salidaConsola;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
        
        String info = "!!!!!!! Error Sintactico Recuperado !!!!!!!\n"+
                      "\tLexema: "+lexema+
                      "\tFila: "+fila+
                      "\tColumna: "+columna+
                      "\n";

        salidaConsola.append(info);
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
            TablaErr.add(datos);
            */
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
        
        String info = "!!!!!!! Error Sintactico, Panic Mode !!!!!!! "+
                "\tLexema: "+lexema+
                "\tFila: "+fila+
                "\tColumna: "+columna+
                "\n";

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}

:}


//-------> Codigo para las acciones gramaticales

action code
{:

:}  

/*----------------------------------------------------------------------------
--------------------- 2da. Area: Declaraciones
----------------------------------------------------------------------------*/

//-------> TERMINALES
terminal apar, cpar, coma, puntoComa, igual;
terminal mas, menos, por, dividir;
terminal String id, numero, cadena, claves, registros, contar, sumar;
terminal String imprimir, numerico, archivo, leerarchivo, graficar;

//-------> NO TERMINALES
non terminal LinkedList<Instruccion> INICIO, LISTAINSTRUCCION;
non terminal Instruccion IMPRIMIR, DECLARACION, INSTRUCCION, GRAFICAR;
non terminal Expresion E;
non terminal EnumTipoDato TIPO;

start with INICIO;

/*-------------------------------------------------------------------
--------------------- 3ra. y ultima area: Reglas Sintacticas
-------------------------------------------------------------------*/
INICIO ::=  LISTAINSTRUCCION:ls{:
            parser.resultado = ls;
        :}
        ;

LISTAINSTRUCCION ::= LISTAINSTRUCCION:a INSTRUCCION:b{:
                    RESULT = a;
                    RESULT.add(b);
                :}
                | INSTRUCCION:b{:
                    RESULT = new LinkedList<>(); 
                    RESULT.add(b);
                :}
                ;

INSTRUCCION ::= DECLARACION:a {: RESULT = a; :}
            | IMPRIMIR:a {: RESULT = a; :}
            | GRAFICAR:a {: RESULT = a; :}
            | error:a puntoComa{: RESULT = new InstruccionConError("Existe una instrucción con error, No se reconoció correctamente", aright, aleft); :}    
            ;

DECLARACION ::= TIPO:tipo id:nombre igual E:asignacion puntoComa {: RESULT = new Declaracion(tipo, nombre, asignacion, tiporight, tipoleft); :}
            ;   

TIPO ::= numerico:a {: RESULT = EnumTipoDato.NUMERICO; :}
      | archivo:a {: RESULT = EnumTipoDato.ARCHIVO; :}
      ;

GRAFICAR ::= graficar:a apar E:b coma E:c coma E:d coma E:r coma E:f cpar puntoComa {: RESULT = new Graficar(b, c, d, r, f, aright, aleft); :}
          ;
IMPRIMIR ::= imprimir:a apar E:b cpar puntoComa {: RESULT = new Imprimir(b, aright, aleft); :}
          ;

E ::= leerarchivo:l apar E:ruta cpar {: RESULT = new FuncionLeerArchivo(ruta, lright, lleft); :}
      | contar:a apar E:b cpar {: RESULT = new Contar(b); :}
      | sumar:a apar E:b coma E:c cpar {: RESULT = new Sumar(b, c, aright, aleft); :}
      | numero:a {: RESULT = new Literal(EnumTipoDato.NUMERICO, a); :}
      | cadena:a {: RESULT = new Literal(EnumTipoDato.CADENA, a); :}
      | id:a {: RESULT = new Id(a, aright, aleft); :}
      ;

/*** 
      Instruccion
          |
        Sumar 
      /      \
  ClaseId   ClaseLiteral

***/