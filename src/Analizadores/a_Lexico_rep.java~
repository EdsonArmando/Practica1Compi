/* The following code was generated by JFlex 1.7.0 */

/*----------------------------------------------------------------------------
--------------------- 1ra. Area: Codigo de Usuario
----------------------------------------------------------------------------*/

//-------> Paquete, importaciones

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.awt.TextArea;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LexicoRe.jflex</tt>
 */
public class a_Lexico_rep implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENT_SIMPLE = 2;
  public static final int COMENT_MULTI = 4;
  public static final int STRNG = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  8, 10,  9,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9, 20,  5,  0,  0,  0,  0,  0, 13, 14,  7, 11, 15, 12,  2,  6, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 16, 19, 17, 18,  0, 
     0, 25, 40, 32,  3, 31, 38, 37, 34, 28,  3,  3, 36, 24, 30, 33, 
    29,  3, 26, 22, 39, 23, 35,  3,  3,  3,  3,  0,  0,  0,  0,  4, 
     0, 25, 40, 32,  3, 31, 38, 37, 34, 28,  3,  3, 36, 24, 30, 33, 
    29,  3, 26, 22, 39, 23, 35,  3,  3,  3,  3,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\2\1\2\3\1\1\6\3\1\21\1\22\1\21"+
    "\1\23\1\24\1\0\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\0\2\3\1\0\6\3\1\2\1\0\2\3"+
    "\1\0\6\3\1\0\2\3\1\0\6\3\2\33\1\0"+
    "\1\3\1\0\5\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\34\2\3\1\0\1\3\2\35"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\1\0\1\3"+
    "\2\36\2\37\2\40\1\0\2\3\2\41\2\42\1\0"+
    "\1\3\1\0\1\3\2\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\244"+
    "\0\u011f\0\244\0\244\0\244\0\244\0\244\0\244\0\244"+
    "\0\244\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e"+
    "\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\244"+
    "\0\244\0\u0386\0\244\0\244\0\u03af\0\244\0\244\0\244"+
    "\0\244\0\244\0\244\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c"+
    "\0\u04a5\0\u04ce\0\u04f7\0\u0520\0\u0549\0\u03af\0\u0572\0\u059b"+
    "\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3"+
    "\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b"+
    "\0\u0854\0\u087d\0\244\0\366\0\u08a6\0\u08cf\0\u08f8\0\u0921"+
    "\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69"+
    "\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1"+
    "\0\u0bda\0\244\0\366\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7"+
    "\0\u0cd0\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74\0\244\0\366\0\244"+
    "\0\366\0\244\0\366\0\u0d9d\0\u0dc6\0\u0def\0\244\0\366"+
    "\0\244\0\366\0\u0e18\0\u0e41\0\u0e6a\0\u0e93\0\244\0\366";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\5\1\7\1\5\1\10\1\11\1\12"+
    "\2\13\1\0\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\2\7\1\30"+
    "\1\7\1\31\1\32\1\7\1\33\1\7\1\34\1\35"+
    "\2\7\1\36\1\37\3\7\10\40\1\41\47\40\1\42"+
    "\2\40\1\0\36\40\5\43\1\44\43\43\52\0\1\6"+
    "\1\45\47\0\1\7\1\0\2\7\21\0\5\7\1\0"+
    "\15\7\6\0\1\46\1\47\62\0\1\50\50\0\1\51"+
    "\50\0\1\52\50\0\1\53\56\0\1\54\22\0\1\7"+
    "\1\0\2\7\21\0\1\7\1\55\3\7\1\0\15\7"+
    "\1\0\1\7\1\0\2\7\21\0\4\7\1\56\1\0"+
    "\15\7\30\0\1\57\21\0\1\7\1\0\2\7\21\0"+
    "\2\7\1\60\2\7\1\0\15\7\1\0\1\7\1\0"+
    "\2\7\21\0\1\7\1\61\3\7\1\0\15\7\1\0"+
    "\1\7\1\0\2\7\21\0\5\7\1\0\5\7\1\62"+
    "\7\7\1\0\1\7\1\0\2\7\21\0\5\7\1\0"+
    "\14\7\1\63\1\0\1\7\1\0\2\7\21\0\5\7"+
    "\1\0\3\7\1\64\11\7\1\0\1\7\1\0\2\7"+
    "\21\0\4\7\1\65\1\0\15\7\6\0\1\41\43\0"+
    "\1\66\77\0\1\67\21\0\1\7\1\0\2\7\21\0"+
    "\2\7\1\70\2\7\1\0\15\7\1\0\1\7\1\0"+
    "\2\7\21\0\5\7\1\0\4\7\1\71\10\7\35\0"+
    "\1\72\14\0\1\7\1\0\2\7\21\0\5\7\1\0"+
    "\1\7\1\73\13\7\1\0\1\7\1\0\2\7\21\0"+
    "\2\7\1\74\2\7\1\0\15\7\1\0\1\7\1\0"+
    "\2\7\21\0\5\7\1\0\2\7\1\75\12\7\1\0"+
    "\1\7\1\0\2\7\21\0\5\7\1\0\13\7\1\76"+
    "\1\7\1\0\1\7\1\0\2\7\21\0\5\7\1\0"+
    "\3\7\1\77\11\7\1\0\1\7\1\0\2\7\21\0"+
    "\3\7\1\100\1\7\1\0\15\7\31\0\1\101\20\0"+
    "\1\7\1\0\2\7\21\0\3\7\1\102\1\7\1\0"+
    "\15\7\1\0\1\7\1\0\2\7\21\0\5\7\1\0"+
    "\6\7\1\103\6\7\32\0\1\104\17\0\1\7\1\0"+
    "\2\7\21\0\4\7\1\105\1\0\15\7\1\0\1\7"+
    "\1\0\2\7\21\0\5\7\1\0\3\7\1\106\11\7"+
    "\1\0\1\7\1\0\2\7\21\0\5\7\1\0\13\7"+
    "\1\107\1\7\1\0\1\7\1\0\2\7\21\0\5\7"+
    "\1\0\3\7\1\110\11\7\1\0\1\7\1\0\2\7"+
    "\21\0\4\7\1\111\1\0\15\7\1\0\1\7\1\0"+
    "\2\7\21\0\5\7\1\0\12\7\1\112\2\7\32\0"+
    "\1\113\17\0\1\7\1\0\2\7\21\0\4\7\1\114"+
    "\1\0\15\7\1\0\1\7\1\0\2\7\21\0\5\7"+
    "\1\115\1\116\14\7\33\0\2\117\15\0\1\7\1\0"+
    "\2\7\21\0\5\7\1\117\1\120\14\7\1\0\1\7"+
    "\1\0\2\7\21\0\4\7\1\121\1\0\15\7\1\0"+
    "\1\7\1\0\2\7\21\0\3\7\1\122\1\7\1\0"+
    "\15\7\1\0\1\7\1\0\2\7\21\0\5\7\1\0"+
    "\2\7\1\123\12\7\1\0\1\7\1\0\2\7\21\0"+
    "\3\7\1\124\1\7\1\0\15\7\1\0\1\7\1\0"+
    "\2\7\21\0\5\7\1\125\1\126\14\7\43\0\1\127"+
    "\6\0\1\7\1\0\2\7\21\0\5\7\1\0\7\7"+
    "\1\130\5\7\30\0\1\131\21\0\1\7\1\0\2\7"+
    "\21\0\2\7\1\132\2\7\1\0\15\7\1\0\1\7"+
    "\1\0\2\7\21\0\5\7\1\133\1\134\14\7\1\0"+
    "\1\7\1\0\2\7\21\0\4\7\1\135\1\0\15\7"+
    "\1\0\1\7\1\0\2\7\21\0\5\7\1\0\3\7"+
    "\1\136\11\7\1\0\1\7\1\0\2\7\21\0\4\7"+
    "\1\137\1\0\15\7\40\0\1\140\11\0\1\7\1\0"+
    "\2\7\21\0\5\7\1\0\4\7\1\141\10\7\41\0"+
    "\1\142\10\0\1\7\1\0\2\7\21\0\5\7\1\0"+
    "\5\7\1\143\7\7\33\0\2\144\15\0\1\7\1\0"+
    "\2\7\21\0\5\7\1\144\1\145\14\7\40\0\1\146"+
    "\11\0\1\7\1\0\2\7\21\0\5\7\1\0\4\7"+
    "\1\147\10\7\1\0\1\7\1\0\2\7\20\0\1\150"+
    "\1\151\4\7\1\0\15\7\1\0\1\7\1\0\2\7"+
    "\21\0\4\7\1\152\1\0\15\7\1\0\1\7\1\0"+
    "\2\7\21\0\5\7\1\0\4\7\1\153\10\7\31\0"+
    "\1\154\20\0\1\7\1\0\2\7\21\0\3\7\1\155"+
    "\1\7\1\0\15\7\32\0\1\156\17\0\1\7\1\0"+
    "\2\7\21\0\4\7\1\157\1\0\15\7\41\0\1\160"+
    "\10\0\1\7\1\0\2\7\21\0\5\7\1\0\5\7"+
    "\1\161\7\7\33\0\2\162\15\0\1\7\1\0\2\7"+
    "\21\0\5\7\1\162\1\163\14\7\1\0\1\7\1\0"+
    "\2\7\20\0\1\164\1\165\4\7\1\0\15\7\1\0"+
    "\1\7\1\0\2\7\21\0\5\7\1\0\6\7\1\166"+
    "\6\7\32\0\1\167\17\0\1\7\1\0\2\7\21\0"+
    "\4\7\1\170\1\0\15\7\33\0\2\171\15\0\1\7"+
    "\1\0\2\7\21\0\5\7\1\171\1\172\14\7\1\0"+
    "\1\7\1\0\2\7\21\0\5\7\1\173\1\174\14\7"+
    "\43\0\1\175\6\0\1\7\1\0\2\7\21\0\5\7"+
    "\1\0\7\7\1\176\5\7\41\0\1\177\10\0\1\7"+
    "\1\0\2\7\21\0\5\7\1\0\5\7\1\200\7\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3772];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\1\11\1\1\10\11\16\1\2\11"+
    "\1\1\2\11\1\0\6\11\1\0\2\1\1\0\7\1"+
    "\1\0\2\1\1\0\6\1\1\0\2\1\1\0\6\1"+
    "\1\11\1\1\1\0\1\1\1\0\5\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\4\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\0\2\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    String cadena="";
    public TextArea salidaConsola;
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public a_Lexico_rep(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { String info = "Error Lexico: <<"+yytext()+">> ["+(yyline+1)+" , "+(yycolumn+1)+"]\n";
                                salidaConsola.append(info);
                                System.out.println(info);
                                /*AcepErr datos =new AcepErr(yytext(),"ERROR LEXICO",(yyline+1),(yycolumn+1), "Simbolo no existe en el lenguaje");
                                    TablaErr.add(datos);*/
            } 
            // fall through
          case 36: break;
          case 2: 
            { System.out.println("Reconocido: <<"+yytext()+">>, numero ");
                                return new Symbol(Simbolos.numero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 37: break;
          case 3: 
            { System.out.println("Reconocido: <<"+yytext()+">>, id ");
                                return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            } 
            // fall through
          case 38: break;
          case 4: 
            { yybegin(STRNG);
            } 
            // fall through
          case 39: break;
          case 5: 
            { System.out.println("Reconocido: <<"+yytext()+">>, dividir");
                            return new Symbol(Simbolos.dividir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 40: break;
          case 6: 
            { System.out.println("Reconocido: <<"+yytext()+">>, por");
                            return new Symbol(Simbolos.por, yycolumn, yyline, yytext());
            } 
            // fall through
          case 41: break;
          case 7: 
            { /* ignore white space. */
            } 
            // fall through
          case 42: break;
          case 8: 
            { System.out.println("Reconocido: <<"+yytext()+">>, mas");
                            return new Symbol(Simbolos.mas, yycolumn, yyline, yytext());
            } 
            // fall through
          case 43: break;
          case 9: 
            { System.out.println("Reconocido: <<"+yytext()+">>, menos");
                            return new Symbol(Simbolos.menos, yycolumn, yyline, yytext());
            } 
            // fall through
          case 44: break;
          case 10: 
            { System.out.println("Reconocido: <<"+yytext()+">>, apar");
                            return new Symbol(Simbolos.apar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 45: break;
          case 11: 
            { System.out.println("Reconocido: <<"+yytext()+">>, cpar");
                            return new Symbol(Simbolos.cpar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 46: break;
          case 12: 
            { System.out.println("Reconocido: <<"+yytext()+">>, coma");
                            return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 47: break;
          case 13: 
            { System.out.println("Reconocido: <<"+yytext()+">>, puntoComa");
                            return new Symbol(Simbolos.puntoComa, yycolumn, yyline, yytext());
            } 
            // fall through
          case 48: break;
          case 14: 
            { System.out.println("Reconocido: <<"+yytext()+">>, igual");
                            return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 49: break;
          case 15: 
            { System.out.println("Reconocido: <<"+yytext()+">>, mayor");
                            return new Symbol(Simbolos.mayor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 50: break;
          case 16: 
            { System.out.println("Reconocido: <<"+yytext()+">>, menor");
                            return new Symbol(Simbolos.menor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 51: break;
          case 17: 
            { 
            } 
            // fall through
          case 52: break;
          case 18: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 53: break;
          case 19: 
            { cadena+=yytext();
            } 
            // fall through
          case 54: break;
          case 20: 
            { String temporal=cadena; cadena=""; yybegin(YYINITIAL);
        return new Symbol(Simbolos.cadena, yychar,yyline,temporal);
            } 
            // fall through
          case 55: break;
          case 21: 
            { yybegin(COMENT_SIMPLE);
            } 
            // fall through
          case 56: break;
          case 22: 
            { yybegin(COMENT_MULTI);
            } 
            // fall through
          case 57: break;
          case 23: 
            { System.out.println("Reconocido: <<"+yytext()+">>, igualigual");
                            return new Symbol(Simbolos.igualigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 58: break;
          case 24: 
            { System.out.println("Reconocido: <<"+yytext()+">>, mayorigual");
                            return new Symbol(Simbolos.mayorigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 59: break;
          case 25: 
            { System.out.println("Reconocido: <<"+yytext()+">>, menorigual");
                            return new Symbol(Simbolos.menorigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 60: break;
          case 26: 
            { System.out.println("Reconocido: <<"+yytext()+">>, diferenteque");
                            return new Symbol(Simbolos.diferenteque, yycolumn, yyline, yytext());
            } 
            // fall through
          case 61: break;
          case 27: 
            { System.out.println("Reconocido: <<"+yytext()+">>, tokenSumar");
                            return new Symbol(Simbolos.sumar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 62: break;
          case 28: 
            { System.out.println("Reconocido: <<"+yytext()+">>, tokenContar");
                                return new Symbol(Simbolos.contar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 63: break;
          case 29: 
            { System.out.println("Reconocido: <<"+yytext()+">>, tokenArchivo");
                                return new Symbol(Simbolos.archivo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 64: break;
          case 30: 
            { System.out.println("Reconocido: <<"+yytext()+">>, imprimir");
                                return new Symbol(Simbolos.imprimir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 65: break;
          case 31: 
            { System.out.println("Reconocido: <<"+yytext()+">>, tokenNunerico");
                                return new Symbol(Simbolos.numerico, yycolumn, yyline, yytext());
            } 
            // fall through
          case 66: break;
          case 32: 
            { System.out.println("Reconocido: <<"+yytext()+">>, tokenContarSi");
                                return new Symbol(Simbolos.contarSi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 67: break;
          case 33: 
            { System.out.println("Reconocido: <<"+yytext()+">>, tokenGraficar");
                                return new Symbol(Simbolos.graficar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 68: break;
          case 34: 
            { System.out.println("Reconocido: <<"+yytext()+">>, tokenObtenerSi");
                                return new Symbol(Simbolos.obtenerSi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 69: break;
          case 35: 
            { System.out.println("Reconocido: <<"+yytext()+">>, tokenLeerArchivo");
                                return new Symbol(Simbolos.leerarchivo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
